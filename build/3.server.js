require("source-map-support").install(),exports.ids=[3],exports.modules={18:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LOAD_POSTS_REQUEST="LOAD_POSTS_REQUEST",t.LOAD_POSTS_SUCCESS="LOAD_POSTS_SUCCESS",t.LOAD_POSTS_FAILURE="LOAD_POSTS_FAILURE",t.LOAD_POST_REQUEST="LOAD_POST_REQUEST",t.LOAD_POST_SUCCESS="LOAD_POST_SUCCESS",t.LOAD_POST_FAILURE="LOAD_POST_FAILURE"},32:function(e,t,r){"use strict";function o(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}function n(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:u,t=arguments[1];switch(t.type){case l.LOAD_POST_REQUEST:return a({},e,{isLoading:!0,error:null});case l.LOAD_POST_SUCCESS:return a({},e,{title:t.payload.title,content:t.payload.content,lastFetched:t.meta.lastFetched,isLoading:!1});case l.LOAD_POST_FAILURE:return a({},e,{error:t.payload});default:return e}}Object.defineProperty(t,"__esModule",{value:!0}),t.selectCurrentPost=void 0;var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&(e[o]=r[o])}return e};t.default=n;var i=r(18),l=o(i),u={lastFetched:null,isLoading:!1,error:null,title:"",content:""};t.selectCurrentPost=function(e){return e.currentPost}},63:function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=function(){var e="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103;return function(t,r,o,n){var a=t&&t.defaultProps,i=arguments.length-3;if(r||0===i||(r={}),r&&a)for(var l in a)void 0===r[l]&&(r[l]=a[l]);else r||(r=a||{});if(1===i)r.children=n;else if(i>1){for(var u=Array(i),c=0;c<i;c++)u[c]=arguments[c+3];r.children=u}return{$$typeof:e,type:t,key:void 0===o?null:""+o,ref:null,props:r,_owner:null}}}(),a=r(60),i=r(7),l=(o(i),r(59)),u=r(103),c=r(17),s=r(27),S=o(s),d=r(61),_=o(d),f=r(32),O={fetch:function(e){var t=e.dispatch,r=e.params.slug;return t((0,u.loadPost)(r))}},p=function(e){return(0,f.selectCurrentPost)(e)},v=n(_.default,{}),P=function(e){var t=e.title,r=e.content,o=e.isLoading,a=e.error;return a?v:n("div",{},void 0,n(S.default,{title:t}),o&&n("div",{},void 0,n("h2",{className:(0,c.css)(L.loading)},void 0,"Loading....")),!o&&n("div",{},void 0,n("h2",{className:(0,c.css)(L.title)},void 0,t),n("p",{className:(0,c.css)(L.content)},void 0,r)))},L=c.StyleSheet.create({content:{fontSize:"1rem",lineHeight:"1.5",margin:"1rem 0",color:"#555"},title:{fontSize:28,margin:"0 auto 1.5rem",color:"#000"},loading:{fontSize:28,margin:"0 auto 1.5rem",color:"#b7b7b7"}});t.default=(0,a.provideHooks)(O)((0,l.connect)(p)(P))},103:function(e,t,r){"use strict";function o(e){return function(t,r,o){var a=o.axios,i=r().sourceRequest,l=i.protocol,u=i.host;return t({type:n.LOAD_POST_REQUEST}),a.get(l+"://"+u+"/api/v0/posts/"+e).then(function(e){t({type:n.LOAD_POST_SUCCESS,payload:e.data,meta:{lastFetched:Date.now()}})}).catch(function(e){console.error("Error in reducer that handles "+n.LOAD_POST_SUCCESS+": ",e),t({type:n.LOAD_POST_FAILURE,payload:e,error:!0})})}}Object.defineProperty(t,"__esModule",{value:!0}),t.loadPost=o;var n=r(18)}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,